// Place this script in /Path/To/Illustrator Folder/Startup Scripts -- create it if doesn't existsfunction pathJoin() {	var args = [].slice.call(arguments),		sep = "\\"	if (Folder.desktop.path.match(/~/)) {		sep = "/"	}	return args.join(sep)}// Trace selected object back to the root of documentfunction tracePath(o, path) {	if (o.parent.typename === "Document") {		return path	}	path.push(o.parent)	return tracePath(o.parent, path)}function showPath(path) {	for (var i = path.length-1; i >= 0; i--) {		path[i].visible = true	}}function getVisibleStates(path) {	var states = []	for (var i = 0; i < path.length; i++) {		states[i] = path[i].visible	}	return states}function restoreVisibleStates(path, states) {	for (var i = 0; i < path.length; i++) {		path[i].visible = states[i]	}}function moveToZOrder(o, z) {	o.zOrder(ZOrderMethod.BRINGTOFRONT)	for (var i = 0; i < z; i++) {		o.zOrder(ZOrderMethod.SENDBACKWARD)	}}function hideCollection(collection) {	for (var i = 0; i < collection.length; i++) {		collection[i].visible = false	}}function getExporter(root) {	var doc = app.activeDocument,		states = getVisibleStates(doc.layers)	try {		// Hide all layers		hideCollection(doc.layers)	} catch(err) {		alert("Exit Isolation Mode before exporting", "Warning", true)		return	}	// Create temporary layer to work on	var exportLayer = doc.layers.add()	exportLayer.visible = true	// Export options	var opts = new ExportOptionsPNG24()	opts.artBoardClipping = true;	var re_size = /@(\d+)x$/	return {		write: function (selected, fname) {			var out, file, cp, artboard, m,				scale = 1			var z, parent, path, v, states			m = fname.match(re_size)			if (m) {				scale = parseInt(m[1], 10)			}			out = pathJoin(root, fname) + ".png"			file = new File(out)			if (selected.typename === 'Layer') {				z = selected.zOrderPosition				parent = selected.parent				path = tracePath(selected, [])				states = getVisibleStates(path)				v = selected.visible				showPath(path)				selected.visible = true				selected.move(exportLayer, ElementPlacement.PLACEATBEGINNING)				path[path.length-1].visible = false				artboard = doc.artboards.add(doc.visibleBounds);				doc.exportFile(file, ExportType.PNG24, opts)				artboard.remove()				path[path.length-1].visible = true				selected.move(parent, ElementPlacement.PLACEATBEGINNING)				moveToZOrder(selected, z)				selected.visible = v				restoreVisibleStates(path, states)			} else {				cp = selected.duplicate(exportLayer)				if (scale !== 1 && cp.hasOwnProperty("resize")) {					cp.resize(100.0 * scale, 100.0 * scale)				}				artboard = doc.artboards.add(cp.visibleBounds);				doc.exportFile(file, ExportType.PNG24, opts)				cp.remove()				artboard.remove()			}		},		done: function () {			exportLayer.remove()			restoreVisibleStates(doc.layers, states)		}	}}